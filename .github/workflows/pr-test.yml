name: Pull Request CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  workflow_dispatch:
  pull_request:
    paths:
      - requirements-test-libraries.txt

env:
  # Colored pytest output on CI despite not having a tty
  FORCE_COLOR: 1

permissions:
  contents: read # to fetch code (actions/checkout)

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: [3.7, 3.8, 3.9, '3.10']
        pyinstaller: ["https://github.com/pyinstaller/pyinstaller/archive/develop.zip"]
        os: ["macos-latest", "ubuntu-latest", "windows-latest"]
      fail-fast: false

    env:
      # Rebuild bootloader when installing PyInstaller from develop branch
      PYINSTALLER_COMPILE_BOOTLOADER: 1

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Limit dependencies to only new/changed libraries.
        if: "${{ github.event.pull_request }}"
        shell: bash
        run: |
          git fetch origin ${{ github.base_ref }}
          set +e
          diff --changed-group-format='%>' --unchanged-group-format='' \
            <(git show origin/${{ github.base_ref }}:requirements-test-libraries.txt) \
            <(git show HEAD:requirements-test-libraries.txt) \
          > requirements-test-libraries.txt
          set -e
          echo '-r requirements-test.txt' >> requirements-test-libraries.txt
          if grep -q pyqtgraph requirements-test-libraries.txt ; then echo PyQt5 >> requirements-test-libraries.txt ;fi
          cat requirements-test-libraries.txt

      - name: Set up .NET Core for pythonnet tests
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.x'

      # Install MariaDB Connector/C from official MariaDB Community Server
      # repository. The version shipped with ubuntu-20.04 is too old for
      # the "mariadb" python package.
      - name: Install MariaDB Connector/C
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          sudo apt-get update
          sudo apt-get install -y wget apt-transport-https
          wget https://downloads.mariadb.com/MariaDB/mariadb_repo_setup
          echo "ad125f01bada12a1ba2f9986a21c59d2cccbe8d584e7f55079ecbeb7f43a4da4  mariadb_repo_setup" | sha256sum -c -
          chmod +x mariadb_repo_setup
          sudo ./mariadb_repo_setup
          sudo apt-get install -y libmariadb3 libmariadb-dev

      - name: Install apt dependencies
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          sudo apt-get update
          # Set up a virtual screen (for GUI libraries and pynput).
          sudo apt-get install libxcb-xkb-dev xvfb
          Xvfb :99 & echo "DISPLAY=:99" >> $GITHUB_ENV
          # Install PyQt5 (qtmodern) dependencies.
          sudo apt-get install -y libxcb-image0 libxcb-keysyms1 libxcb-render-util0 \
            libxkbcommon-x11-0 libxcb-icccm4 libxcb1 openssl \
            libxcb-randr0-dev libxcb-xtest0-dev libxcb-xinerama0-dev \
            libxcb-shape0-dev libxcb-xkb-dev libopengl0 libegl1 \
            libpulse0 libpulse-mainloop-glib0
          # Install cairo dependencies.
          sudo apt-get install -y libcairo2
          # Install libdiscid (dependency of discid python package).
          sudo apt-get install -y libdiscid0

      - name: Install brew dependencies
        if: startsWith(matrix.os, 'macos')
        run: |
          # Install cairo dependencies.
          brew install cairo
          # Install pango dependencies (weasyprint hook).
          brew install pango
          # Install libdiscid (dependency of discid python package).
          brew install libdiscid

      - name: Install dependencies
        shell: bash
        run: |
          # Upgrade to the latest pip.
          python -m pip install -U pip setuptools wheel

          # Install hooks-contrib
          pip install -e .
          pip install --prefer-binary -r requirements-test-libraries.txt

          # Install PyInstaller
          pip install ${{ matrix.pyinstaller }}

      - name: Run tests
        run: pytest -v
