clone_depth: 100

branches:
  only:
    - master

environment:

  APPVEYOR_SAVE_CACHE_ON_ERROR: true

  matrix:
    - PYTHON: C:\Python37
      PYTHON_VERSION: "3.7"
      INSTALL_URL: pyinstaller  # INSTALL_URL is passed straight to pip with `pip install INSTALL_URL`.
      USE_DEV: "False"

    - PYTHON: C:\Python36
      PYTHON_VERSION: "3.6"
      INSTALL_URL: pyinstaller
      USE_DEV: "False"

    - PYTHON: C:\Python35
      PYTHON_VERSION: "3.5"
      INSTALL_URL: pyinstaller
      USE_DEV: "False"

    - PYTHON: C:\Python37
      PYTHON_VERSION: "3.7"
      INSTALL_URL: "https://github.com/pyinstaller/pyinstaller/archive/develop.tar.gz"
      USE_DEV: "True"

    - PYTHON: C:\Python36
      PYTHON_VERSION: "3.6"
      INSTALL_URL: "https://github.com/pyinstaller/pyinstaller/archive/develop.tar.gz"
      USE_DEV: "True"

    - PYTHON: C:\Python35
      PYTHON_VERSION: "3.5"
      INSTALL_URL: "https://github.com/pyinstaller/pyinstaller/archive/develop.tar.gz"
      USE_DEV: "True"

init:
  - ECHO %PYTHON% %PYTHONVERSION%
  - ECHO \"%APPVEYOR_SCHEDULED_BUILD%\"
  # If there is a newer build queued for the same PR, cancel this one.
  # The AppVeyor 'rollout builds' option is supposed to serve the same
  # purpose but it is problematic because it tends to cancel builds pushed
  # directly to master instead of just PR builds (or the converse).
  # credits: JuliaLang developers.
  - ps: if ($env:APPVEYOR_PULL_REQUEST_NUMBER -and $env:APPVEYOR_BUILD_NUMBER -ne ((Invoke-RestMethod `
      https://ci.appveyor.com/api/projects/$env:APPVEYOR_ACCOUNT_NAME/$env:APPVEYOR_PROJECT_SLUG/history?recordsNumber=50).builds | `
      Where-Object pullRequestId -eq $env:APPVEYOR_PULL_REQUEST_NUMBER)[0].buildNumber) { `
      throw "There are newer queued builds for this pull request, failing early." }

cache:
  # Cache downloaded pip packages and built wheels.
  - '%LOCALAPPDATA%\pip\Cache\http'
  - '%LOCALAPPDATA%\pip\Cache\wheels'

install:
  # Prepend newly installed Python to the PATH of this build (this cannot be
  # done from inside the powershell script as it would require to restart
  # the parent CMD process).
  - SET PATH=%PYTHON%;%PYTHON%\Scripts;%PATH%

  # Check that we have the expected version and architecture for Python
  - python --version
  - python -c "import sys, platform, struct;
    print(sys.platform, platform.machine(), struct.calcsize('P')*8)"

  # Upgrade to the latest pip.
  - python -m pip install -U pip setuptools wheel

  # Install hooks-contrib
  - pip install -e .
  - pip install -r requirements-test.txt

  # Install PyInstaller
  - pip install %INSTALL_URL%

build: none

test_script:
  - ps: |
      $pyi_version = python -m PyInstaller --version
      if (!($pyi_version -Match "3.6")) {
          python -m PyInstaller.utils.run_tests -c pytest.ini
      }

on_finish:
  # Remove old or huge cache files to hopefully not exceed the 1GB cache limit.
  #
  # If the cache limit is reached, the cache will not be updated (of not even
  # created in the first run). So this is a trade of between keeping the cache
  # current and having a cache at all.
  # NB: This is done only `on_success` since the cache in uploaded only on
  # success anyway.
  - C:\cygwin\bin\find "%LOCALAPPDATA%\pip" -type f -mtime +360 -delete
  - C:\cygwin\bin\find "%LOCALAPPDATA%\pip" -type f -size +10M -delete
  - C:\cygwin\bin\find "%LOCALAPPDATA%\pip" -empty -delete
  # Show size of cache
  - C:\cygwin\bin\du -hs "%LOCALAPPDATA%\pip\Cache"
