name: Pull Request CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  workflow_dispatch:
  pull_request:
    paths:
      - requirements-test-libraries.txt

env:
  # Colored pytest output on CI despite not having a tty
  FORCE_COLOR: 1

permissions:
  contents: read # to fetch code (actions/checkout)

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12', '3.13']
        pyinstaller: ["https://github.com/pyinstaller/pyinstaller/archive/develop.zip"]
        os: ["macos-13", "macos-14", "ubuntu-24.04", "windows-latest"]
      fail-fast: false

    env:
      # Rebuild bootloader when installing PyInstaller from develop branch
      PYINSTALLER_COMPILE_BOOTLOADER: 1

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Limit dependencies to only new/changed libraries.
        if: "${{ github.event.pull_request }}"
        shell: bash
        run: |
          git fetch origin ${{ github.base_ref }}
          set +e
          # NOTE: we need to be compatible with both GNU diff and Apple/FreeBSD diff
          diff \
            <(git show origin/${{ github.base_ref }}:requirements-test-libraries.txt) \
            <(git show HEAD:requirements-test-libraries.txt) \
            | grep -E "^>" | sed "s/^> //" \
          > requirements-test-libraries.txt
          set -e
          echo '-r requirements-test.txt' >> requirements-test-libraries.txt
          cat requirements-test-libraries.txt

      - name: Set up .NET Core for pythonnet tests
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '6.x'

      # Install MariaDB Connector/C from official MariaDB Community Server
      # repository. The version shipped with ubuntu-20.04 is too old for
      # the "mariadb" python package.
      - name: Install MariaDB Connector/C
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          sudo apt-get update
          sudo apt-get install -y wget apt-transport-https
          wget https://downloads.mariadb.com/MariaDB/mariadb_repo_setup
          echo "c4a0f3dade02c51a6a28ca3609a13d7a0f8910cccbb90935a2f218454d3a914a  mariadb_repo_setup" | sha256sum -c -
          chmod +x mariadb_repo_setup
          sudo ./mariadb_repo_setup --skip-maxscale
          sudo apt-get install -y libmariadb3 libmariadb-dev

      - name: Install apt dependencies
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          sudo apt-get update
          # Set up a virtual screen (for GUI libraries and pynput).
          sudo apt-get install libxcb-xkb-dev xvfb
          Xvfb :99 & echo "DISPLAY=:99" >> $GITHUB_ENV
          # Install PyQt5 (qtmodern) dependencies.
          sudo apt-get install -y libxcb-image0 libxcb-keysyms1 libxcb-render-util0 \
            libxkbcommon-x11-0 libxcb-icccm4 libxcb1 openssl \
            libxcb-randr0-dev libxcb-xtest0-dev libxcb-xinerama0-dev \
            libxcb-shape0-dev libxcb-xkb-dev libopengl0 libegl1 \
            libpulse0 libpulse-mainloop-glib0
          # Install cairo dependencies.
          sudo apt-get install -y libcairo2
          # Install libdiscid (dependency of discid python package).
          sudo apt-get install -y libdiscid0
          # These are dependencies of gmsh
          sudo apt-get install -y libglu1 libgl1 libxrender1 libxcursor1 libxft2 \
            libxinerama1 libgomp1
          # Required by PyGObject (dependency of toga/toga-gtk)
          sudo apt-get install -y gir1.2-gtk-3.0 \
            libcairo2-dev \
            libgirepository1.0-dev gir1.2-girepository-2.0 \
            libgirepository-2.0-dev gir1.2-girepository-3.0
          # Required by pygraphviz
          sudo apt-get install -y graphviz graphviz-dev

      - name: Install brew dependencies
        if: startsWith(matrix.os, 'macos')
        run: |
          # `pkg-config` is deprecated and superseded by `pkgconf`, but it is still pre-installed on the GitHub Actions
          # runner. This leads to `brew link` errors when `pkgconf` is installed as part of dependencies. So for now,
          # manually remove `pkg-config` (and specifically, the problematic `pkg-config@0.29.2`).
          brew uninstall pkg-config || :
          brew uninstall pkg-config@0.29.2 || :
          # Install cairo dependencies.
          brew install cairo
          # Install pango dependencies (weasyprint hook).
          brew install pango
          # Install libdiscid (dependency of discid python package).
          brew install libdiscid
          # Install lsl library for pylsl
          # TODO: switch back to labstreaminglayer/tap/lsl once labstreaminglayer/homebrew-tap#1 is merged
          #brew install labstreaminglayer/tap/lsl
          brew install rokm/labstreaminglayer-tap/lsl
          # This one is required by eccodes (binary wheels with bundled eccodes
          # library are provided only for macOS 13+).
          brew install eccodes
          # Requires by pygraphviz
          brew install graphviz

          # On macos-14 arm64 runners, Homebrew is installed in /opt/homebrew instead of /usr/local prefix, and
          # its headers and shared libraries are not in the default search path. Add them by setting CPPFLAGS
          # and LDFLAGS. This is required by `pygraphviz`.
          if [ "$(brew --prefix)" = "/opt/homebrew" ]; then
              echo "CPPFLAGS=-I/opt/homebrew/include${CPPFLAGS+ ${CPPFLAGS}}" >> $GITHUB_ENV
              echo "LDFLAGS=-L/opt/homebrew/lib${LDFLAGS+ ${LDFLAGS}}" >> $GITHUB_ENV
          fi

      - name: Install dependencies
        shell: bash
        run: |
          # Upgrade to the latest pip.
          python -m pip install -U pip "setuptools<71.0.0" wheel

          # Install hooks-contrib
          pip install -e .

          # Install test libraries
          pip install --prefer-binary -r requirements-test-libraries.txt

          # Additional implied dependencies of test libraries

          # pyqtgraph requires Qt bindings - use PyQt5
          pip show -qq pyqtgraph && pip install --prefer-binary PyQt5

          # NOTE: specify minimum allowed version for sudachidict-* packages, to prevent pip from installing invalid
          # SudachiDict_full-0.0.0-py3-none-any.whl due to --prefer-binary switch used with pip install...
          pip show -qq sudachipy && pip install --prefer-binary "sudachidict-small>=20230927" "sudachidict-core>=20230927" "sudachidict-full>=20230927"

          # pythainlp requires python-crfsuite, but fails to declare it as a requirement.
          pip show -qq pythainlp && pip install --prefer-binary python-crfsuite

          # tests for various trame-* packages require base trame package as well
          pip show -qq trame-client trame-code trame-components trame-datagrid trame-deckgl trame-formkit trame-grid-layout trame-iframe trame-keycloak trame-leaflet trame-markdown trame-matplotlib trame-mesh-streamer trame-plotly trame-pvui trame-quasar trame-rca trame-router trame-server trame-simput trame-tauri trame-tweakpane trame-vega trame-vtk trame-vtk3d trame-vtklocal trame-vuetify trame-xterm && pip install --prefer-binary trame

          pip show -qq trame-vtk && pip install --prefer-binary vtk pyvista nest-asyncio trame-vuetify
          pip show -qq trame-mesh-streamer && pip install --prefer-binary vtk
          pip show -qq trame-rca && pip install --prefer-binary vtk

          # test_xarray_chunk requires dask in addition to xarray
          pip show -qq xarray && pip install --prefer-binary dask

          # Install additional intake plugins for test_intake_plugins
          pip show -qq intake && pip install --prefer-binary intake-xarray

          # Install PyInstaller
          pip install ${{ matrix.pyinstaller }}

      # PyTaskbar 0.1.0 does not ship TaskBarLib.tlb with its wheels anymore (in contrast
      # to earlier releases under the PyTaskbarProgress name); apparently users are supposed
      # to download it separately and copy it to their project's directory. Copying to the
      # package's directory also seems to work, and is what our hook is expecting. So until
      # we see  what directions subsequent releases take, download and install the file.
      # Applicable only to Windows (PyTaskbar is available only for Windows).
      - name: Download and install TLB for PyTaskbar
        if: startsWith(matrix.os, 'windows')
        shell: python
        run: |
          import importlib.metadata
          import importlib.util
          import os
          import sys
          import urllib.request

          import packaging.version

          # Check if PyTaskbar is available, and at >= 0.1.0 version.
          try:
              version = importlib.metadata.version('PyTaskbar')
          except importlib.metadata.PackageNotFoundError:
              print("PyTaskbar dist not found.")
              sys.exit()  # N/A

          print(f"PyTaskbar version: {version}")

          version = packaging.version.parse(version)
          if version < packaging.version.parse("0.1.0"):
              print("PyTaskbar version is lower than 0.1.0.")
              sys.exit()

          # Determine package's path - attempting to import the package might raise
          # missing library error, so look up the spec and module's search location
          # in it.
          spec = importlib.util.find_spec('PyTaskbar')
          if spec is None:
              print("PyTaskbar spec not found.")
              sys.exit()
          location = spec.submodule_search_locations[0]
          print(f"Package location: {location}")

          # Check if the .tlb file already exists
          tlb_file = os.path.join(location, 'TaskbarLib.tlb')
          if os.path.isfile(tlb_file):
              print(f"TLB file already exists.")
              sys.exit()

          # Download the .tlb file from GitHub releases
          tlb_url = f"https://github.com/N3RDIUM/PyTaskbar/releases/download/{version}/TaskbarLib.tlb"
          print(f"Downloading TLB file from: {tlb_url}")

          urllib.request.urlretrieve(tlb_url, tlb_file)

      - name: Run tests
        run: pytest -v

      # Conditionally enable slow tests, so that they are ran only if
      # their corresponding packages are explicitly installed but not
      # if they are installed as dependencies of some other package.
      - name: Check if slow tests are required (scikit-learn)
        id: check-scikit-learn
        shell: bash
        run: |
          grep -E "scikit-learn" requirements-test-libraries.txt && echo "AVAILABLE=yes" >> $GITHUB_OUTPUT || echo "AVAILABLE=no" >> $GITHUB_OUTPUT

      - name: Run slow tests (scikit-learn)
        if: ${{ steps.check-scikit-learn.outputs.AVAILABLE == 'yes' }}
        run: pytest -v -m slow -k sklearn

      - name: Check if slow tests are required (scikit-image)
        id: check-scikit-image
        shell: bash
        run: |
          grep -E "scikit-image" requirements-test-libraries.txt && echo "AVAILABLE=yes" >> $GITHUB_OUTPUT || echo "AVAILABLE=no" >> $GITHUB_OUTPUT

      - name: Run slow tests (scikit-image)
        if: ${{ steps.check-scikit-image.outputs.AVAILABLE == 'yes' }}
        run: pytest -v -m slow -k skimage

      - name: Check if slow tests are required (vtk)
        id: check-vtk
        shell: bash
        run: |
          grep -E "^vtk==" requirements-test-libraries.txt && echo "AVAILABLE=yes" >> $GITHUB_OUTPUT || echo "AVAILABLE=no" >> $GITHUB_OUTPUT

      - name: Run slow tests (vtk)
        if: ${{ steps.check-vtk.outputs.AVAILABLE == 'yes' }}
        run: pytest -v -m slow -k test_vtkmodules
